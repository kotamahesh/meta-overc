#! /bin/bash

trap '' SIGHUP

function usage {
    cat << EOF

Usage: ${0##*/} <cmd> [option]...

Common options for all <cmd>:

   -t <container type>       : type of container including: lxc, lxd, docker.
                               Default is lxc.
   -a <host proc path>       : absolute path to bind mount to host proc, default
                               /host/proc.

${0##*/} launch-peer [option]...

    start a peer container

   -n <container name>: Name of container to be launched

${0##*/} launch-nested [option]...

    start a nested container

   -n <container name>       : Name of container to be launched
   -p <parent container name>: Name of parent container

${0##*/} launch [option]...

    start a container.  wr.parent option in config file will indicate
    the parent container of this container.  If wr.parent is not specified
    then launch it as peer container.

   -n <container name>: Name of container to be launched

${0##*/} launch-group [option]...

    Auto launch containers.

   -g <group name>: Containers belonging to this group name will be auto
                    launched.  Repeat this option for multiple groups

${0##*/} relaunch [option]...

    relaunch an active container.  It first stop active container,
    then relaunch container.

   -n <container name>       : Name of container to be relaunched

${0##*/} enter-ns [option]...

    enter-ns: enter namespaces of container

   -n <container name>       : Name of container to be launched

${0##*/} stop [option]...

    stop an active container

   -n <container name>       : Name of container to be stopped

${0##*/} list [option]...

    list all containers and their state

${0##*/} info [option]...

    display all information about container

   -n <container name>       : Name of container to be displayed

${0##*/} monitor [option]...

    monitor state of containers.  If "-n" option is not provided
    then all containers will be monitored

   -n <container name>       : Name of container to be monitored

${0##*/} exec-cmd [option]... -- <shell command with options>

    invoke a shell cmd against a container

   -n <container name>       : Name of container to be acted upon

${0##*/} exec-lxc-cmd [option]... -- <lxc-xxxxx command with options>

    invoke lxc-xxxxx against a container

   -n <container name>       : Name of container to be acted upon

${0##*/} setup-net [option]...

    setup networks defined by <config file>

   -n <container name>       : Name of container to be acted upon
   -c <config file>          : Absolute path to a config file

${0##*/} remote-net [option]...

    remove networks defined by <config file>

   -n <container name>       : Name of container to be acted upon
   -c <config file>          : Absolute path to a config file
EOF
}

function do_essential_cmd()
{
    local cmd=$@

    # the external utility cube-cmd takes care of this for us
    cube-cmd ${cmd}
    return $?
}

# Global variables
# What container type we support
main_config_file="/etc/dom0-contctl.conf"
container_type="lxc"
host_proc_path="/host/proc"

HOST_CN_NAME="host"

cmd=${1}
container_name=""
parent_container_name=""
cfg_file=""
start_group=""


OPTIND=2
while getopts "h?n:t:p:a:c:g:" opt; do
    case "$opt" in
    n)
        container_name=$OPTARG
        ;;
    t)
        container_type=$OPTARG
        ;;
    a)
        host_proc_path=$OPTARG
        ;;
    p)
        parent_container_name=$OPTARG
        ;;
    g)
        start_group="${start_group} $OPTARG"
        ;;
    c)
        cfg_file=$OPTARG
        ;;
    *)
        usage
        exit 0
        ;;
    esac
done
shift $((OPTIND-1))

# Now load correct backend driver
case "${container_type}" in
    lxc)
        source $(dirname ${0})/lxc_driver.sh
        ;;
    *)
        echo "Error, backend driver ${container_type} is not supported."
        exit 1
        ;;
esac

case "${cmd}" in
    launch-peer)
        [ -z "${container_name}" ] && echo "Error, please provide container name" && exit 1
        launch_peer_container ${container_name}
        ;;
    launch-nested)
        [ -z "${container_name}" ] && echo "Error, please provide container name" && exit 1
        [ -z "${parent_container_name}" ] && \
                echo "Error, please provide parent container name" && exit 1
        launch_nested_container ${container_name} ${parent_container_name}
        ;;
    launch)
        [ -z "${container_name}" ] && echo "Error, please provide container name" && exit 1
        launch_container "${container_name}"
        ;;
    launch-group)
        launch_group "${start_group}"
        ;;
    enter-ns)
        [ -z "${container_name}" ] && echo "Error, please provide container name" && exit 1
        enter_container_ns ${container_name}
        ;;
    stop)
        [ -z "${container_name}" ] && echo "Error, please provide container name" && exit 1
        stop_container ${container_name}
        ;;
    relaunch)
        [ -z "${container_name}" ] && echo "Error, please provide container name" && exit 1
        relaunch_container "${container_name}"
        ;;
    list)
        list_containers
        ;;
    info)
        [ -z "${container_name}" ] && echo "Error, please provide container name" && exit 1
        display_info_container "${container_name}"
        ;;
    monitor)
        monitor_container "${container_name}"
        ;;
    setup-net)
        [ -z "${container_name}" ] && echo "Error, please provide container name" && exit 1
        [ -z "${cfg_file}" ] && echo "Error, please provide net config file" && exit 1
        setup_net ${container_name} ${cfg_file}
        ;;
    remove-net)
        [ -z "${container_name}" ] && echo "Error, please provide container name" && exit 1
        [ -z "${cfg_file}" ] && echo "Error, please provide net config file" && exit 1
        remove_net ${container_name} ${cfg_file}
        ;;
    exec-cmd)
        [ -z "${container_name}" ] && echo "Error, please provide container name" && exit 1
        exec_cmd_container ${container_name} $@ 
        exit $?
        ;;
    exec-lxc-cmd)
        [ "${container_type}" != "lxc" ] && echo "Error, can only be invoked with lxc container" && exit 1
        exec_lxc_cmd_cn "${container_name}" $@
        ;;
    *)
        usage
        ;;
esac
